// Code generated by MockGen. DO NOT EDIT.
// Source: contracts.go

// Package courses is a generated GoMock package.
package courses

import (
	context "context"
	reflect "reflect"
	teachable "teachable/pkg/teachable"

	gomock "github.com/golang/mock/gomock"
)

// MockTeachableService is a mock of TeachableService interface.
type MockTeachableService struct {
	ctrl     *gomock.Controller
	recorder *MockTeachableServiceMockRecorder
}

// MockTeachableServiceMockRecorder is the mock recorder for MockTeachableService.
type MockTeachableServiceMockRecorder struct {
	mock *MockTeachableService
}

// NewMockTeachableService creates a new mock instance.
func NewMockTeachableService(ctrl *gomock.Controller) *MockTeachableService {
	mock := &MockTeachableService{ctrl: ctrl}
	mock.recorder = &MockTeachableServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTeachableService) EXPECT() *MockTeachableServiceMockRecorder {
	return m.recorder
}

// GetEnrolledStudents mocks base method.
func (m *MockTeachableService) GetEnrolledStudents(ctx context.Context, courseID int) (teachable.EnrollmentsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnrolledStudents", ctx, courseID)
	ret0, _ := ret[0].(teachable.EnrollmentsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnrolledStudents indicates an expected call of GetEnrolledStudents.
func (mr *MockTeachableServiceMockRecorder) GetEnrolledStudents(ctx, courseID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnrolledStudents", reflect.TypeOf((*MockTeachableService)(nil).GetEnrolledStudents), ctx, courseID)
}

// GetPublishedCourses mocks base method.
func (m *MockTeachableService) GetPublishedCourses(ctx context.Context) (teachable.CoursesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublishedCourses", ctx)
	ret0, _ := ret[0].(teachable.CoursesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublishedCourses indicates an expected call of GetPublishedCourses.
func (mr *MockTeachableServiceMockRecorder) GetPublishedCourses(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublishedCourses", reflect.TypeOf((*MockTeachableService)(nil).GetPublishedCourses), ctx)
}

// GetStudent mocks base method.
func (m *MockTeachableService) GetStudent(ctx context.Context, userID int) (teachable.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStudent", ctx, userID)
	ret0, _ := ret[0].(teachable.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudent indicates an expected call of GetStudent.
func (mr *MockTeachableServiceMockRecorder) GetStudent(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudent", reflect.TypeOf((*MockTeachableService)(nil).GetStudent), ctx, userID)
}
